{"version":3,"file":"yox.esm.js","sources":["../../../../../node_modules/yox-common/src/util/constant.ts","../../../../../node_modules/yox-common/src/util/is.ts","../../../../../node_modules/yox-common/src/function/execute.ts","../../../../../node_modules/yox-common/src/util/CustomEvent.ts","../../../../../node_modules/yox-common/src/util/array.ts","../../../../../node_modules/yox-common/src/util/string.ts","../../../../../node_modules/yox-common/src/util/keypath.ts","../../../../../node_modules/yox-common/src/util/holder.ts","../../../../../node_modules/yox-common/src/util/object.ts","../../../../../node_modules/yox-common/src/function/toString.ts","../../../../../node_modules/yox-common/src/util/logger.ts","../../../../../node_modules/yox-common/src/util/Emitter.ts","../../../../../node_modules/yox-common/src/function/isNative.ts","../../../../../node_modules/yox-common/src/function/nextTick.ts","../../../../../node_modules/yox-common/src/util/NextTask.ts","../../../../../node_modules/yox-common/src/function/toNumber.ts","../../../../../node_modules/yox-observer/src/Computed.ts","../../../../../node_modules/yox-observer/src/function/matchBest.ts","../../../../../node_modules/yox-observer/src/function/readValue.ts","../../../../../node_modules/yox-observer/src/function/diffString.ts","../../../../../node_modules/yox-observer/src/function/diffArray.ts","../../../../../node_modules/yox-observer/src/function/diffObject.ts","../../../../../node_modules/yox-observer/src/function/diffRecursion.ts","../../../../../node_modules/yox-observer/src/function/diffWatcher.ts","../../../../../node_modules/yox-observer/src/function/filterWatcher.ts","../../../../../node_modules/yox-observer/src/function/formatWatcherOptions.ts","../../../../../node_modules/yox-observer/src/Observer.ts","../../../src/Yox.ts"],"sourcesContent":["/**\n * 为了压缩，定义的常量\n */\nexport const TRUE = true\nexport const FALSE = false\nexport const NULL = null\nexport const UNDEFINED = void 0\nexport const MINUS_ONE = -1\n\nexport const RAW_TRUE = 'true'\nexport const RAW_FALSE = 'false'\nexport const RAW_NULL = 'null'\nexport const RAW_UNDEFINED = 'undefined'\n\nexport const RAW_KEY = 'key'\nexport const RAW_REF = 'ref'\nexport const RAW_SLOT = 'slot'\nexport const RAW_NAME = 'name'\n\nexport const RAW_FILTER = 'filter'\nexport const RAW_PARTIAL = 'partial'\nexport const RAW_COMPONENT = 'component'\nexport const RAW_DIRECTIVE = 'directive'\nexport const RAW_TRANSITION = 'transition'\n\nexport const RAW_THIS = 'this'\nexport const RAW_VALUE = 'value'\nexport const RAW_LENGTH = 'length'\nexport const RAW_FUNCTION = 'function'\nexport const RAW_TEMPLATE = 'template'\nexport const RAW_WILDCARD = '*'\nexport const RAW_DOT = '.'\nexport const RAW_SLASH = '/'\n\nexport const KEYPATH_PARENT = '..'\nexport const KEYPATH_CURRENT = RAW_THIS\n\n/**\n * Single instance for window in browser\n */\nexport const WINDOW = typeof window !== RAW_UNDEFINED ? window : UNDEFINED\n\n/**\n * Single instance for document in browser\n */\nexport const DOCUMENT = typeof document !== RAW_UNDEFINED ? document : UNDEFINED\n\n/**\n * Single instance for global in nodejs or browser\n */\nexport const GLOBAL = typeof global !== RAW_UNDEFINED ? global : WINDOW\n\n/**\n * tap 事件\n *\n * 非常有用的抽象事件，比如 pc 端是 click 事件，移动端是 touchend 事件\n *\n * 这样只需 on-tap=\"handler\" 就可以完美兼容各端\n *\n * 框架未实现此事件，通过 Yox.dom.addSpecialEvent 提供给外部扩展\n *\n */\nexport const EVENT_TAP = 'tap'\n\n/**\n * 点击事件\n */\nexport const EVENT_CLICK = 'click'\n\n/**\n * 输入事件\n */\nexport const EVENT_INPUT = 'input'\n\n/**\n * 变化事件\n */\nexport const EVENT_CHANGE = 'change'\n\n/**\n * 唯一内置的特殊事件：model\n */\nexport const EVENT_MODEL = 'model'\n\n/**\n * Single instance for noop function\n */\nexport const EMPTY_FUNCTION = function () {\n  /** yox */\n}\n\n/**\n * 空对象，很多地方会用到，比如 `a || EMPTY_OBJECT` 确保是个对象\n */\nexport const EMPTY_OBJECT = Object.freeze({})\n\n/**\n * 空数组\n */\nexport const EMPTY_ARRAY = Object.freeze([])\n\n/**\n * 空字符串\n */\nexport const EMPTY_STRING = ''\n","import * as constant from './constant'\n\n/**\n * Check if value is a function.\n *\n * @param value\n * @return\n */\nexport function func(value: any): boolean {\n  return typeof value === constant.RAW_FUNCTION\n}\n\n/**\n * Check if value is an array.\n *\n * @param value\n * @return\n */\nexport function array(value: any): boolean {\n  return Array.isArray(value)\n}\n\n/**\n * Check if value is an object.\n *\n * @param value\n * @return\n */\nexport function object(value: any): boolean {\n  // 低版本 IE 会把 null 当作 object\n  return value !== constant.NULL && typeof value === 'object'\n}\n\n/**\n * Check if value is a string.\n *\n * @param value\n * @return\n */\nexport function string(value: any): boolean {\n  return typeof value === 'string'\n}\n\n/**\n * Check if value is a number.\n *\n * @param value\n * @return\n */\nexport function number(value: any): boolean {\n  return typeof value === 'number' && !isNaN(value)\n}\n\n/**\n * Check if value is boolean.\n *\n * @param value\n * @return\n */\nexport function boolean(value: any): boolean {\n  return typeof value === 'boolean'\n}\n\n/**\n * Check if value is numeric.\n *\n * @param value\n * @return\n */\nexport function numeric(value: any): boolean {\n  return number(value)\n    || (string(value) && !isNaN(parseFloat(value)) && isFinite(value))\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\n/**\n * 任性地执行一个函数，不管它有没有、是不是\n *\n * @param fn 调用的函数\n * @param context 执行函数时的 this 指向\n * @param args 调用函数的参数，多参数时传入数组\n * @return 调用函数的返回值\n */\nexport default function (fn: any, context?: any, args?: any): any {\n  if (is.func(fn)) {\n    return is.array(args)\n      ? fn.apply(context, args)\n      : context !== constant.UNDEFINED\n        ? fn.call(context, args)\n        : args !== constant.UNDEFINED\n          ? fn(args)\n          : fn()\n  }\n}\n","import {\n  YoxInterface,\n  CustomEventInterface,\n} from 'yox-type/src/yox'\n\nimport * as constant from './constant'\n\nexport default class CustomEvent implements CustomEventInterface {\n\n  public static PHASE_CURRENT = 0\n\n  public static PHASE_UPWARD = 1\n\n  public static PHASE_DOWNWARD = constant.MINUS_ONE\n\n  // 事件名称\n  type: string\n\n  // 事件当前阶段\n  phase: number\n\n  // 事件命名空间\n  ns?: string\n\n  // 哪个组件发出的事件\n  target?: YoxInterface\n\n  // 原始事件，比如 DOM 事件\n  originalEvent?: CustomEventInterface | Event\n\n  // 是否已阻止事件的默认行为\n  isPrevented?: true\n\n  // 是否已停止事件冒泡\n  isStoped?: true\n\n  // 处理当前事件的监听器，方便外部获取 listener 进行解绑\n  listener?: Function\n\n  /**\n   * 构造函数\n   *\n   * 可以传事件名称，也可以传原生事件对象\n   */\n  constructor(type: string, originalEvent?: CustomEventInterface | Event) {\n    // 这里不设置命名空间\n    // 因为有没有命名空间取决于 Emitter 的构造函数有没有传 true\n    // CustomEvent 自己无法决定\n    this.type = type\n    this.phase = CustomEvent.PHASE_CURRENT\n    if (originalEvent) {\n      this.originalEvent = originalEvent\n    }\n  }\n\n  /**\n   * 阻止事件的默认行为\n   */\n  preventDefault(): this {\n    const instance = this\n    if (!instance.isPrevented) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.preventDefault()\n      }\n      instance.isPrevented = constant.TRUE\n    }\n    return instance\n  }\n\n  /**\n   * 停止事件广播\n   */\n  stopPropagation(): this {\n    const instance = this\n    if (!instance.isStoped) {\n      const { originalEvent } = instance\n      if (originalEvent) {\n        originalEvent.stopPropagation()\n      }\n      instance.isStoped = constant.TRUE\n    }\n    return instance\n  }\n\n  prevent(): this {\n    return this.preventDefault()\n  }\n\n  stop(): this {\n    return this.stopPropagation()\n  }\n\n}","import * as is from './is'\nimport * as constant from './constant'\n\nimport execute from '../function/execute'\n\n/**\n * 遍历数组\n *\n * @param array\n * @param callback 返回 false 可停止遍历\n * @param reversed 是否逆序遍历\n */\nexport function each<T>(\n  array: T[],\n  callback: (item: T, index: number) => boolean | void,\n  reversed?: boolean\n): void {\n  const { length } = array\n  if (length) {\n    if (reversed) {\n      for (let i = length - 1; i >= 0; i--) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n    else {\n      for (let i = 0; i < length; i++) {\n        if (callback(array[i], i) === constant.FALSE) {\n          break\n        }\n      }\n    }\n  }\n}\n\nfunction nativePush<T>(array: T[], item: T) {\n  array[array.length] = item\n}\n\nfunction nativeUnshift<T>(array: T[], item: T) {\n  array.unshift(item)\n}\n\n/**\n * 添加\n *\n * @param array\n * @param value\n * @param action\n */\nfunction addItem<T>(array: T[], value: T | T[], action: Function) {\n  if (is.array(value)) {\n    each(\n      value as T[],\n      function (item: T) {\n        action(array, item)\n      }\n    )\n  }\n  else {\n    action(array, value)\n  }\n}\n\n/**\n * 往后加\n *\n * @param array\n * @param target\n */\nexport function push<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativePush)\n}\n\n/**\n * 往前加\n *\n * @param array\n * @param target\n */\nexport function unshift<T>(array: T[], target: T | T[]): void {\n  addItem(array, target, nativeUnshift)\n}\n\n/**\n * 数组项在数组中的位置\n *\n * @param array 数组\n * @param target 数组项\n * @param strict 是否全等判断，默认是全等\n * @return 如果未找到，返回 -1\n */\nexport function indexOf<T>(array: T[], target: T, strict?: boolean): number {\n  let result = constant.MINUS_ONE\n  each(\n    array,\n    function (item: any, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        result = index\n        return constant.FALSE\n      }\n    }\n  )\n  return result\n}\n\n/**\n * 获取数组最后一项\n *\n * @param array 数组\n * @return\n */\nexport function last<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array[length - 1]\n  }\n}\n\n/**\n * 弹出数组最后一项\n *\n * 项目里用的太多，仅用于节省字符...\n *\n * @param array 数组\n * @return 弹出的数组项\n */\nexport function pop<T>(array: T[]): T | void {\n  const { length } = array\n  if (length > 0) {\n    return array.pop()\n  }\n}\n\n/**\n * 删除数组项\n *\n * @param array 数组\n * @param item 待删除项\n * @param strict 是否全等判断，默认是全等\n * @return 删除的数量\n */\nexport function remove<T>(array: T[], target: T, strict?: boolean): number {\n  let result = 0\n  each(\n    array,\n    function (item: T, index: number) {\n      if (strict === constant.FALSE ? item == target : item === target) {\n        array.splice(index, 1)\n        result++\n      }\n    },\n    constant.TRUE\n  )\n  return result\n}\n\n/**\n * 数组是否包含 item\n *\n * @param array 数组\n * @param target 可能包含的数组项\n * @param strict 是否全等判断，默认是全等\n * @return\n */\nexport function has<T>(array: T[], target: T, strict?: boolean): boolean {\n  return indexOf(array, target, strict) >= 0\n}\n\n/**\n * 把类数组转成数组\n *\n * @param array 类数组\n * @return\n */\nexport function toArray<T>(array: T[] | ArrayLike<T>): T[] {\n  return is.array(array)\n    ? array\n    : execute(constant.EMPTY_ARRAY.slice, array)\n}\n\n/**\n * 把数组转成对象\n *\n * @param array 数组\n * @param key 数组项包含的字段名称，如果数组项是基本类型，可不传\n * @param value\n * @return\n */\nexport function toObject(array: any[], key?: string | null, value?: any): object {\n  let result = {}\n  each(\n    array,\n    function (item: any) {\n      result[key ? item[key] : item] = value || item\n    }\n  )\n  return result\n}\n\n/**\n * 把数组合并成字符串\n *\n * @param array\n * @param separator\n * @return\n */\nexport function join(array: string[], separator: string): string {\n  return array.join(separator)\n}\n\n/**\n * 用于判断长度大于 0 的数组\n *\n * @param array\n * @return\n */\nexport function falsy(array: any): boolean {\n  return !is.array(array) || !array.length\n}\n","import * as is from './is'\nimport * as constant from './constant'\n\nconst camelizePattern = /-([a-z])/gi,\n\nhyphenatePattern = /\\B([A-Z])/g,\n\ncapitalizePattern = /^[a-z]/,\n\ncamelizeCache: Record<string, string> = {},\n\nhyphenateCache: Record<string, string> = {},\n\ncapitalizeCache: Record<string, string> = {}\n\n/**\n * 连字符转成驼峰\n *\n * @param str\n * @return 驼峰格式的字符串\n */\nexport function camelize(str: string): string {\n  if (!camelizeCache[str]) {\n    camelizeCache[str] = str.replace(\n      camelizePattern,\n      function ($0, $1) {\n        return upper($1)\n      }\n    )\n  }\n  return camelizeCache[str]\n}\n\n/**\n * 驼峰转成连字符\n *\n * @param str\n * @return 连字符格式的字符串\n */\nexport function hyphenate(str: string): string {\n  if (!hyphenateCache[str]) {\n    hyphenateCache[str] = str.replace(\n      hyphenatePattern,\n      function ($0, $1) {\n        return '-' + lower($1)\n      }\n    )\n  }\n  return hyphenateCache[str]\n}\n\n/**\n * 首字母大写\n *\n * @param str\n * @return\n */\nexport function capitalize(str: string): string {\n  if (!capitalizeCache[str]) {\n    capitalizeCache[str] = str.replace(\n      capitalizePattern,\n      upper\n    )\n  }\n  return capitalizeCache[str]\n}\n\n/**\n * 清除两侧空白符\n *\n * @param str\n * @return 清除两侧空白符的字符串\n */\nexport function trim(str: any): string {\n  return falsy(str)\n    ? constant.EMPTY_STRING\n    : str.trim()\n}\n\n/**\n * 截取字符串\n *\n * @param str\n * @param start\n * @param end\n * @return\n */\nexport function slice(str: string, start: number, end?: number): string {\n  return is.number(end)\n    ? start === end\n      ? constant.EMPTY_STRING\n      : str.slice(start, end)\n    : str.slice(start)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param start\n * @return\n */\nexport function indexOf(str: string, part: string, start?: number): number {\n  return str.indexOf(part, start !== constant.UNDEFINED ? start : 0)\n}\n\n/**\n * 获取子串的起始位置\n *\n * @param str\n * @param part\n * @param end\n * @return\n */\nexport function lastIndexOf(str: string, part: string, end?: number): number {\n  return str.lastIndexOf(part, end !== constant.UNDEFINED ? end : str.length)\n}\n\n/**\n * str 是否以 part 开头\n *\n * @param str\n * @param part\n * @return\n */\nexport function startsWith(str: string, part: string): boolean {\n  return indexOf(str, part) === 0\n}\n\n/**\n * str 是否以 part 结束\n *\n * @param str\n * @param part\n * @return\n */\nexport function endsWith(str: string, part: string): boolean {\n  const offset = str.length - part.length\n  return offset >= 0 && lastIndexOf(str, part) === offset\n}\n\n/**\n * 获取某个位置的字符\n */\nexport function charAt(str: string, index?: number): string {\n  return str.charAt(index || 0)\n}\n\n/**\n * 获取某个位置的字符编码\n */\nexport function codeAt(str: string, index?: number): number {\n  return str.charCodeAt(index || 0)\n}\n\n/**\n * 大写格式\n */\nexport function upper(str: string): string {\n  return str.toUpperCase()\n}\n\n/**\n * 小写格式\n */\nexport function lower(str: string): string {\n  return str.toLowerCase()\n}\n\n/**\n * str 是否包含 part\n *\n * @param str\n * @param part\n * @return 是否包含\n */\nexport function has(str: string, part: string): boolean {\n  return indexOf(str, part) >= 0\n}\n\n/**\n * 判断长度大于 0 的字符串\n *\n * @param str\n * @return\n */\nexport function falsy(str: any): boolean {\n  return !is.string(str) || !str.length\n}\n","import * as string from './string'\nimport * as constant from './constant'\n\nconst dotPattern = /\\./g,\n\nasteriskPattern = /\\*/g,\n\ndoubleAsteriskPattern = /\\*\\*/g,\n\nsplitCache: Record<string, string[]> = {},\n\npatternCache: Record<string, RegExp> = {}\n\n/**\n * 判断 keypath 是否以 prefix 开头，如果是，返回匹配上的前缀长度，否则返回 -1\n *\n * @param keypath\n * @param prefix\n * @return\n */\nexport function match(keypath: string, prefix: string): number {\n  if (keypath === prefix) {\n    return prefix.length\n  }\n  prefix += constant.RAW_DOT\n  return string.startsWith(keypath, prefix)\n    ? prefix.length\n    : constant.MINUS_ONE\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath\n * @param callback 返回 false 可中断遍历\n */\nexport function each(keypath: string, callback: (key: string, isLast: boolean) => boolean | void) {\n  // 如果 keypath 是 toString 之类的原型字段\n  // splitCache[keypath] 会取到原型链上的对象\n  const list = splitCache.hasOwnProperty(keypath)\n    ? splitCache[keypath]\n    : (splitCache[keypath] = keypath.split(constant.RAW_DOT))\n\n  for (let i = 0, lastIndex = list.length - 1; i <= lastIndex; i++) {\n    if (callback(list[i], i === lastIndex) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 遍历 keypath 的每个部分\n *\n * @param keypath1\n * @param keypath2\n */\nexport function join(keypath1: string, keypath2: string): string {\n  return keypath1 && keypath2\n    ? keypath1 + constant.RAW_DOT + keypath2\n    : keypath1 || keypath2\n}\n\n/**\n * 是否模糊匹配\n *\n * @param keypath\n */\nexport function isFuzzy(keypath: string): boolean {\n  return string.has(keypath, constant.RAW_WILDCARD)\n}\n\n/**\n * 模糊匹配 keypath\n *\n * @param keypath\n * @param pattern\n */\nexport function matchFuzzy(keypath: string, pattern: string): string | void {\n  let cache = patternCache[pattern]\n  if (!cache) {\n    const str = pattern\n      .replace(dotPattern, '\\\\.')\n      .replace(asteriskPattern, '(\\\\w+)')\n      .replace(doubleAsteriskPattern, '([\\.\\\\w]+?)')\n    cache = patternCache[pattern] = new RegExp(`^${str}$`)\n  }\n  const result = keypath.match(cache)\n  if (result) {\n    return result[1]\n  }\n}","import {\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as constant from './constant'\n\n/**\n * 全局 value holder，避免频繁的创建临时对象\n */\nconst holder: ValueHolder = {\n  value: constant.UNDEFINED\n}\n\nexport default holder","import {\n  Data,\n  ValueHolder,\n} from 'yox-type/src/type'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as constant from './constant'\nimport * as keypathUtil from './keypath'\n\nimport holder from './holder'\n\n/**\n * 获取对象的 key 的数组\n *\n * @param object\n * @return\n */\nexport function keys(object: Data): string[] {\n  return Object.keys(object)\n}\n\nfunction sortKeyByAsc(a: string, b: string): number {\n  return a.length - b.length\n}\n\nfunction sortKeyByDesc(a: string, b: string): number {\n  return b.length - a.length\n}\n\n/**\n * 排序对象的 key\n *\n * @param object\n * @param desc 是否逆序，默认从小到大排序\n * @return\n */\nexport function sort(object: Data, desc?: boolean): string[] {\n  return keys(object).sort(\n    desc ? sortKeyByDesc : sortKeyByAsc\n  )\n}\n\n/**\n * 遍历对象\n *\n * @param object\n * @param callback 返回 false 可停止遍历\n */\nexport function each(object: Data, callback: (value: any, key: string) => boolean | void): void {\n  for (let key in object) {\n    if (callback(object[key], key) === constant.FALSE) {\n      break\n    }\n  }\n}\n\n/**\n * 清空对象所有的键值对\n *\n * @param object\n */\nexport function clear(object: Data): void {\n  each(\n    object,\n    function (_, key) {\n      delete object[key]\n    }\n  )\n}\n\n/**\n * 扩展对象\n *\n * @return\n */\nexport function extend(original: Data, object: Data): Data {\n  each(\n    object,\n    function (value, key) {\n      original[key] = value\n    }\n  )\n  return original\n}\n\n/**\n * 合并对象\n *\n * @return\n */\nexport function merge(object1: Data | void, object2: Data | void): Data | void {\n  return object1 && object2\n    ? extend(extend({}, object1), object2)\n    : object1 || object2\n}\n\n/**\n * 拷贝对象\n *\n * @param object\n * @param deep 是否需要深拷贝\n * @return\n */\nexport function copy(object: any, deep?: boolean): any {\n  let result = object\n  if (is.array(object)) {\n    if (deep) {\n      result = []\n      array.each(\n        object,\n        function (item, index) {\n          result[index] = copy(item, deep)\n        }\n      )\n    }\n    else {\n      result = object.slice()\n    }\n  }\n  else if (is.object(object)) {\n    result = {}\n    each(\n      object,\n      function (value, key) {\n        result[key] = deep ? copy(value, deep) : value\n      }\n    )\n  }\n  return result\n}\n\n/**\n * 从对象中查找一个 keypath\n *\n * 返回值是空时，表示没找到值\n *\n * @param object\n * @param keypath\n * @return\n */\nexport function get(object: any, keypath: string): ValueHolder | undefined {\n\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n\n      if (object != constant.NULL) {\n\n        // 先直接取值\n        let value = object[key],\n\n        // 紧接着判断值是否存在\n        // 下面会处理计算属性的值，不能在它后面设置 hasValue\n        hasValue = value !== constant.UNDEFINED\n\n        // 如果是计算属性，取计算属性的值\n        if (value && is.func(value.get)) {\n          value = value.get()\n        }\n\n        if (isLast) {\n          if (hasValue) {\n            holder.value = value\n            object = holder\n          }\n          else {\n            object = constant.UNDEFINED\n          }\n        }\n        else {\n          object = value\n        }\n      }\n      else {\n        object = constant.UNDEFINED\n        return constant.FALSE\n      }\n\n    }\n  )\n\n  return object\n\n}\n\n/**\n * 为对象设置一个键值对\n *\n * @param object\n * @param keypath\n * @param value\n * @param autofill 是否自动填充不存在的对象，默认自动填充\n */\nexport function set(object: Data, keypath: string, value: any, autofill?: boolean): void {\n  keypathUtil.each(\n    keypath,\n    function (key, isLast) {\n      if (isLast) {\n        object[key] = value\n      }\n      else if (object[key]) {\n        object = object[key]\n      }\n      else if (autofill) {\n        object = object[key] = {}\n      }\n      else {\n        return constant.FALSE\n      }\n    }\n  )\n}\n\n/**\n * 对象是否包含某个 key\n *\n * @param object\n * @param key\n * @return\n */\nexport function has(object: Data, key: string | number): boolean {\n  // 不用 hasOwnProperty，性能差\n  return object[key] !== constant.UNDEFINED\n}\n\n/**\n * 是否是空对象\n *\n * @param object\n * @return\n */\nexport function falsy(object: any): boolean {\n  return !is.object(object)\n    || is.array(object)\n    || !keys(object).length\n}","import * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: string): string {\n  return target != constant.NULL && target.toString\n    ? target.toString()\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as string\n      : constant.EMPTY_STRING\n}\n","import * as constant from './constant'\nimport toString from '../function/toString'\n\nexport const DEBUG = 1\nexport const INFO = 2\nexport const WARN = 3\nexport const ERROR = 4\nexport const FATAL = 5\n\n/**\n * 是否有原生的日志特性，没有必要单独实现\n */\nconst nativeConsole: Console | null = typeof console !== constant.RAW_UNDEFINED ? console : constant.NULL,\n\n/**\n * 当前是否是源码调试，如果开启了代码压缩，empty function 里的注释会被干掉\n * 源码模式默认选 INFO，因为 DEBUG 输出的日志太多，会导致性能急剧下降\n */\ndefaultLogLevel = /yox/.test(toString(constant.EMPTY_FUNCTION)) ? INFO : WARN,\n\n/**\n * console 样式前缀\n * ie 和 edge 不支持 console.log 样式\n */\nstylePrefix = constant.WINDOW && /edge|msie|trident/i.test(constant.WINDOW.navigator.userAgent)\n  ? constant.EMPTY_STRING\n  : '%c',\n\n/**\n * 日志打印函数\n */\nprintLog = nativeConsole\n  ? stylePrefix\n    ? function (tag: string, msg: string, style: string) {\n      nativeConsole.log(stylePrefix + tag, style, msg)\n    }\n    : function (tag: string, msg: string) {\n      nativeConsole.log(tag, msg)\n    }\n  : constant.EMPTY_FUNCTION\n\n/**\n * 全局调试开关\n */\nfunction getLogLevel() {\n  if (constant.GLOBAL) {\n    const logLevel = constant.GLOBAL['YOX_LOG_LEVEL']\n    if (logLevel >= DEBUG && logLevel <= FATAL) {\n      return logLevel as number\n    }\n  }\n  return defaultLogLevel\n}\n\nfunction getStyle(backgroundColor: string) {\n  return `background-color:${backgroundColor};border-radius:12px;color:#fff;font-size:10px;padding:3px 6px;`\n}\n\n/**\n * 打印 debug 日志\n *\n * @param msg\n */\nexport function debug(msg: string, tag?: string): void {\n  if (getLogLevel() <= DEBUG) {\n    printLog(tag || 'Yox debug', msg, getStyle('#999'))\n  }\n}\n\n/**\n * 打印 info 日志\n *\n * @param msg\n */\nexport function info(msg: string, tag?: string): void {\n  if (getLogLevel() <= INFO) {\n    printLog(tag || 'Yox info', msg, getStyle('#2db7f5'))\n  }\n}\n\n/**\n * 打印 warn 日志\n *\n * @param msg\n */\nexport function warn(msg: string, tag?: string): void {\n  if (getLogLevel() <= WARN) {\n    printLog(tag || 'Yox warn', msg, getStyle('#f90'))\n  }\n}\n\n/**\n * 打印 error 日志\n *\n * @param msg\n */\nexport function error(msg: string, tag?: string): void {\n  if (getLogLevel() <= ERROR) {\n    printLog(tag || 'Yox error', msg, getStyle('#ed4014'))\n  }\n}\n\n/**\n * 致命错误，中断程序\n *\n * @param msg\n */\nexport function fatal(msg: string, tag?: string): void {\n  if (getLogLevel() <= FATAL) {\n    throw new Error(`[${tag || 'Yox fatal'}]: ${msg}`)\n  }\n}\n","import {\n  NativeListener,\n} from 'yox-type/src/type'\n\nimport {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport execute from '../function/execute'\n\nimport CustomEvent from './CustomEvent'\n\nimport * as is from './is'\nimport * as array from './array'\nimport * as object from './object'\nimport * as string from './string'\nimport * as logger from './logger'\nimport * as constant from './constant'\n\ntype Namespace = {\n\n  // 事件名称\n  type: string\n\n  // 命名空间\n  ns?: string\n\n}\n\nexport default class Emitter {\n\n  /**\n   * 是否开启命名空间\n   */\n  ns: boolean\n\n  /**\n   * 已注册的事件监听\n   */\n  listeners: Record<string, EmitterOptions[]>\n\n  /**\n   * 原生事件监听，一个事件对应一个 listener\n   */\n  nativeListeners?: Record<string, NativeListener>\n\n  constructor(ns?: boolean) {\n    this.ns = ns || constant.FALSE\n    this.listeners = {}\n  }\n\n  /**\n   * 发射事件\n   *\n   * @param type 事件名称或命名空间\n   * @param args 事件处理函数的参数列表\n   * @param filter 自定义过滤器\n   */\n  fire(\n    type: string | Namespace,\n    args: any[] | void,\n    filter?: (\n      namespace: Namespace,\n      args: any[] | void,\n      options: EmitterOptions\n    ) => boolean | void\n  ): boolean {\n\n    let instance = this,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    list = instance.listeners[namespace.type],\n\n    isComplete = constant.TRUE\n\n    if (list) {\n\n      // 避免遍历过程中，数组发生变化，比如增删了\n      list = object.copy(list)\n\n      // 判断是否是发射事件\n      // 如果 args 的第一个参数是 CustomEvent 类型，表示发射事件\n      // 因为事件处理函数的参数列表是 (event, data)\n      const event = args && args[0] instanceof CustomEvent\n        ? args[0] as CustomEvent\n        : constant.UNDEFINED\n\n      array.each(\n        list,\n        function (options) {\n\n          // 命名空间不匹配\n          if (!matchNamespace(namespace.ns, options)\n            // 在 fire 过程中被移除了\n            || !array.has(list, options)\n            // 传了 filter，则用 filter 判断是否过滤此 options\n            || (filter && !filter(namespace, args, options))\n          ) {\n            return\n          }\n\n          // 为 event 对象加上当前正在处理的 listener\n          // 这样方便业务层移除事件绑定\n          // 比如 on('xx', function) 这样定义了匿名 listener\n          // 在这个 listener 里面获取不到当前 listener 的引用\n          // 为了能引用到，有时候会先定义 var listener = function\n          // 然后再 on('xx', listener) 这样其实是没有必要的\n          if (event) {\n            event.listener = options.fn\n          }\n\n          let result = execute(options.fn, options.ctx, args)\n\n          if (event) {\n            event.listener = constant.UNDEFINED\n          }\n\n          // 执行次数\n          options.num = options.num ? (options.num + 1) : 1\n\n          // 注册的 listener 可以指定最大执行次数\n          if (options.num === options.max) {\n            instance.off(namespace, options.fn)\n          }\n\n          // 如果没有返回 false，而是调用了 event.stop 也算是返回 false\n          if (event) {\n            if (result === constant.FALSE) {\n              event.prevent().stop()\n            }\n            else if (event.isStoped) {\n              result = constant.FALSE\n            }\n          }\n\n          if (result === constant.FALSE) {\n            return isComplete = constant.FALSE\n          }\n        }\n      )\n\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 注册监听\n   *\n   * @param type\n   * @param listener\n   */\n  on(\n    type: string | Namespace,\n    listener: Function | EmitterOptions\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners,\n\n    options: EmitterOptions = is.func(listener)\n      ? { fn: listener as Function }\n      : listener as EmitterOptions\n\n    if (is.object(options) && is.func(options.fn)) {\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace\n      options.ns = namespace.ns\n      array.push(\n        listeners[namespace.type] || (listeners[namespace.type] = []),\n        options\n      )\n    }\n    else if (process.env.NODE_ENV === 'development') {\n      logger.fatal(`emitter.on(type, listener) invoke failed：\\n\\n\"listener\" is expected to be a Function or an EmitterOptions.\\n`)\n    }\n\n  }\n\n  /**\n   * 取消监听\n   *\n   * @param type\n   * @param listener\n   */\n  off(\n    type?: string | Namespace,\n    listener?: Function\n  ): void {\n\n    const instance = this,\n\n    listeners = instance.listeners\n\n    if (type) {\n\n      const namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n      name = namespace.type,\n\n      ns = namespace.ns,\n\n      matchListener = createMatchListener(listener),\n\n      each = function (list: EmitterOptions[], name: string) {\n        array.each(\n          list,\n          function (options, index) {\n            if (matchListener(options) && matchNamespace(ns, options)) {\n              list.splice(index, 1)\n            }\n          },\n          constant.TRUE\n        )\n        if (!list.length) {\n          delete listeners[name]\n        }\n      }\n\n      if (name) {\n        if (listeners[name]) {\n          each(listeners[name], name)\n        }\n      }\n      else if (ns) {\n        object.each(listeners, each)\n      }\n\n      // 在开发阶段进行警告，比如传了 listener 进来，listener 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 1 && listener == constant.NULL) {\n          logger.warn(`emitter.off(type, listener) is invoked, but \"listener\" is ${listener}.`)\n        }\n      }\n\n    }\n    else {\n      // 清空\n      instance.listeners = {}\n      // 在开发阶段进行警告，比如传了 type 进来，type 是个空值\n      // 但你不知道它是空值\n      if (process.env.NODE_ENV === 'development') {\n        if (arguments.length > 0) {\n          logger.warn(`emitter.off(type) is invoked, but \"type\" is ${type}.`)\n        }\n      }\n    }\n\n  }\n\n  /**\n   * 是否已监听某个事件\n   *\n   * @param type\n   * @param listener\n   */\n  has(\n    type: string | Namespace,\n    listener?: Function\n  ): boolean {\n\n    let instance = this,\n\n    listeners = instance.listeners,\n\n    namespace = is.string(type) ? instance.parse(type as string) : type as Namespace,\n\n    name = namespace.type,\n\n    ns = namespace.ns,\n\n    result = constant.TRUE,\n\n    matchListener = createMatchListener(listener),\n\n    each = function (list: EmitterOptions[]) {\n      array.each(\n        list,\n        function (options) {\n          if (matchListener(options) && matchNamespace(ns, options)) {\n            return result = constant.FALSE\n          }\n        }\n      )\n      return result\n    }\n\n    if (name) {\n      if (listeners[name]) {\n        each(listeners[name])\n      }\n    }\n    else if (ns) {\n      object.each(listeners, each)\n    }\n\n    return !result\n\n  }\n\n  /**\n   * 把事件类型解析成命名空间格式\n   *\n   * @param type\n   */\n  parse(type: string): Namespace {\n\n    // 这里 ns 必须为字符串\n    // 用于区分 event 对象是否已完成命名空间的解析\n    const result = {\n      type,\n      ns: constant.EMPTY_STRING,\n    }\n\n    // 是否开启命名空间\n    if (this.ns) {\n      const index = string.indexOf(type, constant.RAW_DOT)\n      if (index >= 0) {\n        result.type = string.slice(type, 0, index)\n        result.ns = string.slice(type, index + 1)\n      }\n    }\n\n    return result\n\n  }\n\n}\n\nfunction matchTrue() {\n  return constant.TRUE\n}\n\n/**\n * 外部会传入 Function 或 EmitterOptions 或 空\n *\n * 这里根据传入值的不同类型，创建不同的判断函数\n *\n * 如果传入的是 EmitterOptions，则全等判断\n *\n * 如果传入的是 Function，则判断函数是否全等\n *\n * 如果传入的是空，则直接返回 true\n *\n * @param listener\n */\nfunction createMatchListener(listener: Function | void): (options: EmitterOptions) => boolean {\n  return is.func(listener)\n      ? function (options: EmitterOptions) {\n          return listener === options.fn\n        }\n      : matchTrue\n}\n\n/**\n * 判断 options 是否能匹配命名空间\n *\n * 如果 namespace 和 options.ns 都不为空，则需完全匹配\n *\n * 如果他们两个其中任何一个为空，则不判断命名空间\n *\n * @param namespace\n * @param options\n */\nfunction matchNamespace(namespace: string | void, options: EmitterOptions): boolean {\n  const { ns } = options\n  return ns && namespace\n    ? ns === namespace\n    : constant.TRUE\n}","import * as is from '../util/is'\nimport * as string from '../util/string'\nimport toString from './toString'\n\nexport default function (target: any): boolean {\n  return is.func(target)\n    && string.has(toString(target), '[native code]')\n}","import * as constant from '../util/constant'\nimport isNative from './isNative'\n\ndeclare const setImmediate: Function\n\nlet nextTick: Function\n\n// IE (10+) 和 node\nif (typeof setImmediate === constant.RAW_FUNCTION && isNative(setImmediate)) {\n  nextTick = setImmediate\n}\n// 用 MessageChannel 去做 setImmediate 的 polyfill\n// 原理是将新的 message 事件加入到原有的 dom events 之后\n// 兼容性 IE10+ 和其他标准浏览器\nif (typeof MessageChannel === constant.RAW_FUNCTION && isNative(MessageChannel)) {\n  nextTick = function (fn: any) {\n    const channel = new MessageChannel()\n    channel.port1.onmessage = fn\n    channel.port2.postMessage(1)\n  }\n}\nelse {\n  nextTick = setTimeout\n}\n\nexport default nextTick\n","import {\n  Task,\n} from 'yox-type/src/type'\n\nimport * as array from './array'\nimport execute from '../function/execute'\nimport nextTick from '../function/nextTick'\n\nlet shared: NextTask | void\n\nexport default class NextTask {\n\n  /**\n   * 全局单例\n   */\n  public static shared(): NextTask {\n    return shared || (shared = new NextTask())\n  }\n\n  /**\n   * 异步队列\n   */\n  tasks: Task[]\n\n  constructor() {\n    this.tasks = []\n  }\n\n  /**\n   * 在队尾添加异步任务\n   */\n  append(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.push(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 在队首添加异步任务\n   */\n  prepend(func: Function, context?: any): void {\n    const instance = this, { tasks } = instance\n    array.unshift(\n      tasks,\n      {\n        fn: func,\n        ctx: context\n      }\n    )\n    if (tasks.length === 1) {\n      nextTick(\n        function () {\n          instance.run()\n        }\n      )\n    }\n  }\n\n  /**\n   * 清空异步队列\n   */\n  clear(): void {\n    this.tasks.length = 0\n  }\n\n  /**\n   * 立即执行异步任务，并清空队列\n   */\n  run(): void {\n    const { tasks } = this\n    if (tasks.length) {\n      this.tasks = []\n      array.each(\n        tasks,\n        function (task) {\n          execute(task.fn, task.ctx)\n        }\n      )\n    }\n  }\n\n}\n","import * as is from '../util/is'\nimport * as constant from '../util/constant'\n\nexport default function (target: any, defaultValue?: number): number {\n  return is.numeric(target)\n    ? +target\n    : defaultValue !== constant.UNDEFINED\n      ? defaultValue as number\n      : 0\n}\n","import {\n  Watcher,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport Observer from './Observer'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 计算属性\n *\n * 可配置 cache、deps、get、set 等\n */\nexport default class Computed {\n\n  static current?: Computed\n\n  keypath: string\n\n  value: any\n\n  deps: string[]\n\n  cache: boolean\n\n  fixed: boolean\n\n  context: any\n\n  observer: Observer\n\n  getter: ComputedGetter\n\n  setter: ComputedSetter | void\n\n  watcher: Watcher\n\n  watcherOptions: WatcherOptions\n\n  unique: Record<string, boolean>\n\n  constructor(\n    keypath: string,\n    sync: boolean,\n    cache: boolean,\n    deps: string[],\n    observer: Observer,\n    getter: ComputedGetter,\n    setter: ComputedSetter | void\n  ) {\n\n    const instance = this\n\n    instance.keypath = keypath\n    instance.cache = cache\n\n    instance.deps = deps\n\n    instance.context = observer.context\n    instance.observer = observer\n    instance.getter = getter\n    instance.setter = setter\n\n    instance.unique = {}\n\n    instance.watcher = function ($0: any, $1: any, $2: string) {\n\n      // 计算属性的依赖变了会走进这里\n\n      const oldValue = instance.value,\n      newValue = instance.get(constant.TRUE)\n\n      if (newValue !== oldValue) {\n        observer.diff(keypath, newValue, oldValue)\n      }\n\n    }\n\n    instance.watcherOptions = {\n      sync,\n      watcher: instance.watcher\n    }\n\n    if (instance.fixed = !array.falsy(deps)) {\n      array.each(\n        deps,\n        function (dep) {\n          observer.watch(\n            dep,\n            instance.watcherOptions\n          )\n        }\n      )\n    }\n\n  }\n\n  /**\n   * 读取计算属性的值\n   *\n   * @param force 是否强制刷新缓存\n   */\n  get(force?: boolean): any {\n\n    const instance = this,\n\n    { getter, context } = instance\n\n    // 禁用缓存\n    if (!instance.cache) {\n      instance.value = execute(getter, context)\n    }\n\n    // 减少取值频率，尤其是处理复杂的计算规则\n    else if (force || !object.has(instance, constant.RAW_VALUE)) {\n\n      // 如果写死了依赖，则不需要收集依赖\n      if (instance.fixed) {\n        instance.value = execute(getter, context)\n      }\n      else {\n\n        // 清空上次收集的依赖\n        instance.unbind()\n\n        // 开始收集新的依赖\n        const lastComputed = Computed.current\n        Computed.current = instance\n\n        instance.value = execute(getter, context)\n\n        // 绑定新的依赖\n        instance.bind()\n\n        Computed.current = lastComputed\n      }\n\n    }\n\n    return instance.value\n  }\n\n  set(value: any): void {\n    const { setter, context } = this\n    if (setter) {\n      setter.call(context, value)\n    }\n  }\n\n  /**\n   * 添加依赖\n   *\n   * 这里只是为了保证依赖唯一，最后由 bind() 实现绑定\n   *\n   * @param dep\n   */\n  add(dep: string): void {\n    this.unique[dep] = constant.TRUE\n  }\n\n  /**\n   * 绑定依赖\n   */\n  bind(): void {\n\n    const { unique, deps, observer, watcherOptions } = this\n\n    object.each(\n      unique,\n      function (_: any, dep: string) {\n        array.push(deps, dep)\n        observer.watch(\n          dep,\n          watcherOptions\n        )\n      }\n    )\n\n    // 用完重置\n    // 方便下次收集依赖\n    this.unique = {}\n\n  }\n\n  /**\n   * 解绑依赖\n   */\n  unbind(): void {\n\n    const { deps, observer, watcher } = this\n\n    array.each(\n      deps,\n      function (dep) {\n        observer.unwatch(dep, watcher)\n      },\n      constant.TRUE\n    )\n\n    deps.length = 0\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\n/**\n * 从 keypath 数组中选择和 keypath 最匹配的那一个\n *\n * @param sorted 经过排序的 keypath 数组\n * @param keypath\n */\nexport default function (sorted: string[], keypath: string): any {\n\n  let result: any\n\n  array.each(\n    sorted,\n    function (prefix) {\n      const length = keypathUtil.match(keypath, prefix)\n      if (length >= 0) {\n        result = {\n          name: prefix,\n          prop: string.slice(keypath, length)\n        }\n        return constant.FALSE\n      }\n    }\n  )\n\n  return result\n\n}","import * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\nexport default function (source: any, keypath: string): any {\n\n  if (source == constant.NULL || keypath === constant.EMPTY_STRING) {\n    return source\n  }\n\n  const result = object.get(source, keypath)\n  if (result) {\n    return result.value\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsString = is.string(newValue),\n\n  oldIsString = is.string(oldValue)\n\n  if (newIsString || oldIsString) {\n    callback(\n      constant.RAW_LENGTH,\n      newIsString ? newValue.length : constant.UNDEFINED,\n      oldIsString ? oldValue.length : constant.UNDEFINED\n    )\n    return constant.TRUE\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧数组\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n): true | void {\n\n  const newIsArray = is.array(newValue),\n\n  oldIsArray = is.array(oldValue)\n\n  if (newIsArray || oldIsArray) {\n\n    const newLength = newIsArray ? newValue.length : constant.UNDEFINED,\n\n    oldLength = oldIsArray ? oldValue.length : constant.UNDEFINED\n\n    callback(\n      constant.RAW_LENGTH,\n      newLength,\n      oldLength\n    )\n\n    for (let i = 0, length = Math.max(newLength || 0, oldLength || 0); i < length; i++) {\n      callback(\n        '' + i,\n        newValue ? newValue[i] : constant.UNDEFINED,\n        oldValue ? oldValue[i] : constant.UNDEFINED\n      )\n    }\n\n    return constant.TRUE\n\n  }\n\n}","import * as is from 'yox-common/src/util/is'\nimport * as object from 'yox-common/src/util/object'\nimport * as constant from 'yox-common/src/util/constant'\n\n/**\n * 对比新旧对象\n *\n * @param newValue\n * @param oldValue\n * @param callback\n */\nexport default function (\n  newValue: any,\n  oldValue: any,\n  callback: (key: string, newValue: any, oldValue: any) => void\n) {\n\n  const newIsObject = is.object(newValue),\n\n  oldIsObject = is.object(oldValue)\n\n  if (newIsObject || oldIsObject) {\n\n    newValue = newIsObject ? newValue : constant.EMPTY_OBJECT\n    oldValue = oldIsObject ? oldValue : constant.EMPTY_OBJECT\n\n    if (newIsObject) {\n      object.each(\n        newValue,\n        function (value: any, key: string) {\n          if (value !== oldValue[key]) {\n            callback(key, value, oldValue[key])\n          }\n        }\n      )\n    }\n\n    if (oldIsObject) {\n      object.each(\n        oldValue,\n        function (value: any, key: string) {\n          if (value !== newValue[key]) {\n            callback(key, newValue[key], value)\n          }\n        }\n      )\n    }\n\n  }\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport diffString from './diffString'\nimport diffArray from './diffArray'\nimport diffObject from './diffObject'\n\nexport default function diffRecursion(\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watchFuzzyKeypaths: string[],\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  const diff = function (subKeypath: string, subNewValue: any, subOldValue: any) {\n\n    if (subNewValue !== subOldValue) {\n\n      const newKeypath = keypathUtil.join(keypath, subKeypath)\n\n      array.each(\n        watchFuzzyKeypaths,\n        function (fuzzyKeypath) {\n          if (keypathUtil.matchFuzzy(newKeypath, fuzzyKeypath) !== constant.UNDEFINED) {\n            callback(\n              fuzzyKeypath, newKeypath, subNewValue, subOldValue\n            )\n          }\n        }\n      )\n\n      diffRecursion(newKeypath, subNewValue, subOldValue, watchFuzzyKeypaths, callback)\n\n    }\n\n  }\n\n  diffString(newValue, oldValue, diff)\n    || diffArray(newValue, oldValue, diff)\n    || diffObject(newValue, oldValue, diff)\n\n}","import * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\nimport * as keypathUtil from 'yox-common/src/util/keypath'\n\nimport readValue from './readValue'\nimport diffRecursion from './diffRecursion'\n\nexport default function (\n  keypath: string,\n  newValue: any,\n  oldValue: any,\n  watcher: object, isRecursive: boolean,\n  callback: (watchKeypath: string, keypath: string, newValue: any, oldValue: any) => void\n) {\n\n  let fuzzyKeypaths: string[] | undefined\n\n  // 遍历监听的 keypath，如果未被监听，则无需触发任何事件\n  object.each(\n    watcher,\n    function (_, watchKeypath) {\n\n      // 模糊监听，如 users.*.name\n      if (keypathUtil.isFuzzy(watchKeypath)) {\n\n        // 如果当前修改的是 users.0 整个对象\n        // users.0 和 users.*.name 无法匹配\n        // 此时要知道设置 users.0 到底会不会改变 users.*.name 需要靠递归了\n\n        // 如果匹配，则无需递归\n        if (keypathUtil.matchFuzzy(keypath, watchKeypath) !== constant.UNDEFINED) {\n          callback(\n            watchKeypath, keypath, newValue, oldValue\n          )\n        }\n        else if (isRecursive) {\n          if (fuzzyKeypaths) {\n            array.push(\n              fuzzyKeypaths,\n              watchKeypath\n            )\n          }\n          else {\n            fuzzyKeypaths = [watchKeypath]\n          }\n        }\n\n        return\n      }\n\n      // 不是模糊匹配，直接靠前缀匹配\n      // 比如监听的是 users.0.name，此时修改 users.0，则直接读出子属性值，判断是否相等\n      const length = keypathUtil.match(watchKeypath, keypath)\n      if (length >= 0) {\n\n        const subKeypath = string.slice(watchKeypath, length),\n        subNewValue = readValue(newValue, subKeypath),\n        subOldValue = readValue(oldValue, subKeypath)\n\n        if (subNewValue !== subOldValue) {\n          callback(\n            watchKeypath, watchKeypath, subNewValue, subOldValue\n          )\n        }\n\n      }\n\n    }\n  )\n\n  // 存在模糊匹配的需求\n  // 必须对数据进行递归\n  // 性能确实会慢一些，但是很好用啊，几乎可以监听所有的数据\n  if (fuzzyKeypaths) {\n    diffRecursion(keypath, newValue, oldValue, fuzzyKeypaths, callback)\n  }\n\n}","import {\n  EmitterOptions,\n} from 'yox-type/src/options'\n\n/**\n * 触发异步变化时，用此函数过滤下，哪些 listener 应该执行\n *\n * @param item\n * @param data\n */\nexport default function (_: any, args: any[] | void, options: EmitterOptions): boolean | void {\n\n  if (options.count && args) {\n\n    // 采用计数器的原因是，同一个 options 可能执行多次\n    // 比如监听 user.*，如果同批次修改了 user.name 和 user.age\n    // 这个监听器会调用多次，如果第一次执行就把 count 干掉了，第二次就无法执行了\n\n    options.count--\n\n    // 新旧值不相等\n    return args[0] !== args[1]\n\n  }\n\n}","import {\n  Watcher,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\n// 避免频繁创建对象\nconst optionsHolder: WatcherOptions = {\n  watcher: constant.EMPTY_FUNCTION\n}\n\n/**\n * 格式化 watch options\n *\n * @param options\n */\nexport default function (options: Watcher | WatcherOptions | void, immediate: boolean | void): WatcherOptions | void {\n\n  if (is.func(options)) {\n    optionsHolder.watcher = options as Watcher\n    optionsHolder.immediate = immediate === constant.TRUE\n    return optionsHolder\n  }\n\n  if (options && (options as WatcherOptions).watcher) {\n    return options as WatcherOptions\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    logger.fatal(`watcher should be a function or object.`)\n  }\n\n}","import {\n  Data,\n  Watcher,\n  ValueHolder,\n  ComputedGetter,\n  ComputedSetter,\n} from 'yox-type/src/type'\n\nimport {\n  WatcherOptions,\n  ComputedOptions,\n  EmitterOptions,\n} from 'yox-type/src/options'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as object from 'yox-common/src/util/object'\nimport * as string from 'yox-common/src/util/string'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport toNumber from 'yox-common/src/function/toNumber'\nimport execute from 'yox-common/src/function/execute'\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\n\nimport Computed from './Computed'\nimport matchBest from './function/matchBest'\nimport diffWatcher from './function/diffWatcher'\nimport filterWatcher from './function/filterWatcher'\nimport formatWatcherOptions from './function/formatWatcherOptions'\n\ninterface AsyncChange {\n\n  // 旧值\n  value: any\n\n  // 监听的 keypath\n  keypaths: string[]\n\n}\n\n/**\n * 观察者有两种观察模式：\n *\n * 1. 同步监听\n * 2. 异步监听\n *\n * 对于`计算属性`这种需要实时变化的对象，即它的依赖变了，它需要立即跟着变，否则会出现不一致的问题\n * 这种属于同步监听\n *\n * 对于外部调用 observer.watch('keypath', listener)，属于异步监听，它只关心是否变了，而不关心是否是立即触发的\n */\nexport default class Observer {\n\n  data: Data\n\n  context: any\n\n  nextTask: NextTask\n\n  computed?: Record<string, Computed>\n\n  reversedComputedKeys?: string[]\n\n  syncEmitter: Emitter\n\n  asyncEmitter: Emitter\n\n  asyncChanges: Record<string, AsyncChange>\n\n  pending?: boolean\n\n  constructor(data?: Data, context?: any) {\n\n    const instance = this\n\n    instance.data = data || {}\n    instance.context = context || instance\n    instance.nextTask = new NextTask()\n\n    instance.syncEmitter = new Emitter()\n    instance.asyncEmitter = new Emitter()\n    instance.asyncChanges = {}\n\n  }\n\n  /**\n   * 获取数据\n   *\n   * @param keypath\n   * @param defaultValue\n   * @param depIgnore\n   * @return\n   */\n  get(\n    keypath: string,\n    defaultValue?: any,\n    depIgnore?: boolean\n  ): any {\n\n    const instance = this,\n\n    currentComputed = Computed.current,\n\n    { data, computed, reversedComputedKeys } = instance\n\n    // 传入 '' 获取整个 data\n    if (keypath === constant.EMPTY_STRING) {\n      return data\n    }\n\n    // 调用 get 时，外面想要获取依赖必须设置是谁在收集依赖\n    // 如果没设置，则跳过依赖收集\n    if (currentComputed && !depIgnore) {\n      currentComputed.add(keypath)\n    }\n\n    let result: ValueHolder | void, target: Computed | void\n\n    if (computed) {\n      target = computed[keypath]\n      if (target) {\n        return target.get()\n      }\n      if (reversedComputedKeys) {\n        const match = matchBest(reversedComputedKeys, keypath)\n        if (match && match.prop) {\n          result = object.get(\n            computed[match.name].get(),\n            match.prop\n          )\n        }\n      }\n    }\n\n    if (!result) {\n      result = object.get(data, keypath)\n    }\n\n    return result ? result.value : defaultValue\n\n  }\n\n  /**\n   * 更新数据\n   *\n   * @param keypath\n   * @param value\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ) {\n\n    const instance = this,\n\n    { data, computed, reversedComputedKeys } = instance,\n\n    setValue = function (newValue: any, keypath: string) {\n\n      const oldValue = instance.get(keypath)\n      if (newValue === oldValue) {\n        return\n      }\n\n      let target: Computed | void\n\n      if (computed) {\n        target = computed[keypath]\n        if (target) {\n          target.set(newValue)\n        }\n        if (reversedComputedKeys) {\n          const match = matchBest(reversedComputedKeys, keypath)\n          if (match && match.prop) {\n            target = computed[match.name]\n            if (target) {\n              const targetValue = target.get()\n              if (is.object(targetValue)) {\n                object.set(targetValue, match.prop, newValue)\n              }\n            }\n          }\n        }\n      }\n\n      if (!target) {\n        object.set(data, keypath, newValue)\n      }\n\n      instance.diff(keypath, newValue, oldValue)\n\n    }\n\n    if (is.string(keypath)) {\n      setValue(value, keypath as string)\n    }\n    else if (is.object(keypath)) {\n      object.each(keypath as Data, setValue)\n    }\n\n  }\n\n  /**\n   * 同步调用的 diff，用于触发 syncEmitter，以及唤醒 asyncEmitter\n   *\n   * @param keypath\n   * @param newValue\n   * @param oldValue\n   */\n  diff(\n    keypath: string,\n    newValue: any,\n    oldValue: any\n  ): void {\n\n    const instance = this,\n\n    { syncEmitter, asyncEmitter, asyncChanges } = instance,\n\n    /**\n     * 我们认为 $ 开头的变量是不可递归的\n     * 比如浏览器中常见的 $0 表示当前选中元素\n     * DOM 元素是不能递归的\n     */\n    isRecursive = string.codeAt(keypath) !== 36\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      syncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n        syncEmitter.fire(watchKeypath, [newValue, oldValue, keypath])\n      }\n    )\n\n    /**\n     * 此处有坑，举个例子\n     *\n     * observer.watch('a', function () {})\n     *\n     * observer.set('a', 1)\n     *\n     * observer.watch('a', function () {})\n     *\n     * 这里，第一个 watcher 应该触发，但第二个不应该，因为它绑定监听时，值已经是最新的了\n     */\n\n    diffWatcher(\n      keypath, newValue, oldValue,\n      asyncEmitter.listeners, isRecursive,\n      function (watchKeypath: string, keypath: string, newValue: any, oldValue: any) {\n\n        array.each(\n          asyncEmitter.listeners[watchKeypath],\n          function (item) {\n            (item.count as number)++\n          }\n        )\n\n        const { keypaths } = asyncChanges[keypath] || (asyncChanges[keypath] = { value: oldValue, keypaths: [] })\n        if (!array.has(keypaths, watchKeypath)) {\n          array.push(keypaths, watchKeypath)\n        }\n\n        if (!instance.pending) {\n          instance.pending = constant.TRUE\n          instance.nextTask.append(\n            function () {\n              if (instance.pending) {\n                instance.pending = constant.UNDEFINED\n                instance.diffAsync()\n              }\n            }\n          )\n        }\n      }\n    )\n\n  }\n\n  /**\n   * 异步触发的 diff\n   */\n  diffAsync(): void {\n\n    const instance = this,\n\n    { asyncEmitter, asyncChanges } = instance\n\n    instance.asyncChanges = {}\n\n    object.each(\n      asyncChanges,\n      function (change: AsyncChange, keypath: string) {\n\n        const args = [instance.get(keypath), change.value, keypath]\n\n        // 不能在这判断新旧值是否相同，相同就不 fire\n        // 因为前面标记了 count，在这中断会导致 count 无法清除\n\n        array.each(\n          change.keypaths,\n          function (watchKeypath) {\n            asyncEmitter.fire(watchKeypath, args, filterWatcher)\n          }\n        )\n\n      }\n    )\n\n  }\n\n  /**\n   * 添加计算属性\n   *\n   * @param keypath\n   * @param computed\n   */\n  addComputed(\n    keypath: string,\n    options: ComputedGetter | ComputedOptions\n  ): Computed | void {\n\n    let cache = constant.TRUE,\n\n    sync = constant.TRUE,\n\n    deps: string[] = [],\n\n    getter: ComputedGetter | void,\n\n    setter: ComputedSetter | void\n\n    if (is.func(options)) {\n      getter = options as ComputedGetter\n    }\n    else if (is.object(options)) {\n      const computedOptions = options as ComputedOptions\n      if (is.boolean(computedOptions.cache)) {\n        cache = computedOptions.cache as boolean\n      }\n      if (is.boolean(computedOptions.sync)) {\n        sync = computedOptions.sync as boolean\n      }\n      // 因为可能会修改 deps，所以这里创建一个新的 deps，避免影响外部传入的 deps\n      if (is.array(computedOptions.deps)) {\n        deps = object.copy(computedOptions.deps)\n      }\n      if (is.func(computedOptions.get)) {\n        getter = computedOptions.get\n      }\n      if (is.func(computedOptions.set)) {\n        setter = computedOptions.set\n      }\n    }\n\n    if (getter) {\n\n      const instance = this,\n\n      computed = new Computed(keypath, sync, cache, deps, instance, getter, setter)\n\n      if (!instance.computed) {\n        instance.computed = {}\n      }\n\n      instance.computed[keypath] = computed\n      instance.reversedComputedKeys = object.sort(instance.computed, constant.TRUE)\n\n      return computed\n\n    }\n\n  }\n\n  /**\n   * 移除计算属性\n   *\n   * @param keypath\n   */\n  removeComputed(\n    keypath: string\n  ): void {\n\n    const instance = this,\n\n    { computed } = instance\n\n    if (computed && object.has(computed, keypath)) {\n      delete computed[keypath]\n      instance.reversedComputedKeys = object.sort(computed, constant.TRUE)\n    }\n\n  }\n\n  /**\n   * 监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   * @param immediate\n   */\n  watch(\n    keypath: string | Record<string, Watcher | WatcherOptions>,\n    watcher?: Watcher | WatcherOptions,\n    immediate?: boolean\n  ) {\n\n    const instance = this,\n\n    { context, syncEmitter, asyncEmitter } = instance,\n\n    bind = function (keypath: string, options: WatcherOptions) {\n\n      const emitter = options.sync ? syncEmitter : asyncEmitter,\n\n      // formatWatcherOptions 保证了 options.watcher 一定存在\n      listener: EmitterOptions = {\n        fn: options.watcher,\n        ctx: context,\n        count: 0,\n      }\n\n      if (options.once) {\n        listener.max = 1\n      }\n\n      emitter.on(keypath, listener)\n\n      if (options.immediate) {\n        execute(\n          options.watcher,\n          context,\n          [\n            instance.get(keypath),\n            constant.UNDEFINED,\n            keypath\n          ]\n        )\n      }\n\n    }\n\n    if (is.string(keypath)) {\n      bind(\n        keypath as string,\n        formatWatcherOptions(watcher, immediate) as WatcherOptions\n      )\n      return\n    }\n\n    object.each(\n      keypath as Data,\n      function (options: Watcher | WatcherOptions, keypath: string) {\n        bind(keypath, formatWatcherOptions(options) as WatcherOptions)\n      }\n    )\n\n  }\n\n  /**\n   * 取消监听数据变化\n   *\n   * @param keypath\n   * @param watcher\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: Watcher\n  ) {\n    this.syncEmitter.off(keypath, watcher)\n    this.asyncEmitter.off(keypath, watcher)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   *\n   * @param keypath\n   * @return 取反后的布尔值\n   */\n  toggle(keypath: string): boolean {\n    const value = !this.get(keypath)\n    this.set(keypath, value)\n    return value\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) + (step || 1)\n    if (!is.number(max) || value <= (max as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    const value = toNumber(this.get(keypath), 0) - (step || 1)\n    if (!is.number(min) || value >= (min as number)) {\n      this.set(keypath, value)\n      return value\n    }\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n\n    let list = this.get(keypath)\n    list = !is.array(list) ? [] : object.copy(list)\n\n    const { length } = list\n    if (index === constant.TRUE || index === length) {\n      list.push(item)\n    }\n    else if (index === constant.FALSE || index === 0) {\n      list.unshift(item)\n    }\n    else if (index > 0 && index < length) {\n      list.splice(index, 0, item)\n    }\n    else {\n      return\n    }\n\n    this.set(keypath, list)\n\n    return constant.TRUE\n\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.TRUE)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.insert(keypath, item, constant.FALSE)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)\n      && index >= 0\n      && index < list.length\n    ) {\n      list = object.copy(list)\n      list.splice(index, 1)\n      this.set(keypath, list)\n      return constant.TRUE\n    }\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    let list = this.get(keypath)\n    if (is.array(list)) {\n      list = object.copy(list)\n      if (array.remove(list, item)) {\n        this.set(keypath, list)\n        return constant.TRUE\n      }\n    }\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return object.copy(data, deep)\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    const instance = this\n    instance.syncEmitter.off()\n    instance.asyncEmitter.off()\n    instance.nextTask.clear()\n    object.clear(instance)\n  }\n\n}\n","import {\n  Data,\n  Filter,\n  Partial,\n  ThisTask,\n  ThisWatcher,\n  ThisListener,\n  Component,\n  ComponentCallback,\n  ComponentLoader,\n  PropTypeFunction,\n  PropValueFunction,\n  PropRule,\n} from 'yox-type/src/type'\n\nimport {\n  VNode,\n} from 'yox-type/src/vnode'\n\nimport {\n  DirectiveHooks,\n  TransitionHooks,\n} from 'yox-type/src/hooks'\n\nimport {\n  EmitterOptions,\n  ComponentOptions,\n  ThisWatcherOptions,\n} from 'yox-type/src/options'\n\nimport {\n  YoxInterface,\n} from 'yox-type/src/yox'\n\nimport {\n  IsApi,\n  DomApi,\n  ArrayApi,\n  ObjectApi,\n  StringApi,\n  LoggerApi,\n} from 'yox-type/src/api'\n\nimport {\n  HOOK_BEFORE_CREATE,\n  HOOK_AFTER_CREATE,\n  HOOK_BEFORE_MOUNT,\n  HOOK_AFTER_MOUNT,\n  HOOK_BEFORE_UPDATE,\n  HOOK_AFTER_UPDATE,\n  HOOK_BEFORE_DESTROY,\n  HOOK_AFTER_DESTROY,\n  HOOK_BEFORE_PROPS_UPDATE,\n  NAMESPACE_HOOK,\n  DIRECTIVE_MODEL,\n  MODEL_PROP_DEFAULT,\n  SLOT_DATA_PREFIX,\n  MODIFER_NATIVE,\n} from 'yox-config/src/config'\n\nimport execute from 'yox-common/src/function/execute'\n\nimport Emitter from 'yox-common/src/util/Emitter'\nimport NextTask from 'yox-common/src/util/NextTask'\nimport CustomEvent from 'yox-common/src/util/CustomEvent'\n\nimport * as is from 'yox-common/src/util/is'\nimport * as array from 'yox-common/src/util/array'\nimport * as string from 'yox-common/src/util/string'\nimport * as object from 'yox-common/src/util/object'\nimport * as logger from 'yox-common/src/util/logger'\nimport * as constant from 'yox-common/src/util/constant'\n\nimport * as snabbdom from 'yox-snabbdom/src/snabbdom'\n\nimport * as templateCompiler from 'yox-template-compiler/src/compiler'\nimport * as templateGenerator from 'yox-template-compiler/src/generator'\nimport * as templateRender from 'yox-template-compiler/src/renderer'\n\nimport * as domApi from 'yox-dom/src/dom'\n\nimport Observer from 'yox-observer/src/Observer'\n\nimport * as event from './directive/event'\nimport * as model from './directive/model'\nimport * as binding from './directive/binding'\n\n\nconst globalDirectives = {},\n\nglobalTransitions = {},\n\nglobalComponents = {},\n\nglobalPartials = {},\n\nglobalFilters = {},\n\ncompileCache = {},\n\nTEMPLATE_COMPUTED = '$$',\n\nselectorPattern = /^[#.][-\\w+]+$/\n\nexport default class Yox implements YoxInterface {\n\n  $options: ComponentOptions\n\n  $observer: Observer\n\n  $emitter: Emitter\n\n  $el?: HTMLElement\n\n  $template?: Function\n\n  $refs?: Record<string, YoxInterface | HTMLElement>\n\n  $model?: string\n\n  $root?: YoxInterface\n\n  $parent?: YoxInterface\n\n  $context?: YoxInterface\n\n  $children?: YoxInterface[]\n\n  $vnode: VNode | undefined\n\n  $directives?: Record<string, DirectiveHooks>\n\n  $components?: Record<string, ComponentOptions>\n\n  $transitions?: Record<string, TransitionHooks>\n\n  $partials?: Record<string, Function>\n\n  $filters?: Record<string, Filter>\n\n  /**\n   * core 版本\n   */\n  public static version = process.env.NODE_VERSION\n\n  /**\n   * 方便外部共用的通用逻辑，特别是写插件，减少重复代码\n   */\n  public static is: IsApi = is\n  public static dom: DomApi = domApi\n  public static array: ArrayApi = array\n  public static object: ObjectApi = object\n  public static string: StringApi = string\n  public static logger: LoggerApi = logger\n\n  public static Event = CustomEvent\n  public static Emitter = Emitter\n\n  /**\n   * 定义组件对象\n   */\n  public static define<Computed, Watchers, Events, Methods>(\n    options: ComponentOptions<Computed, Watchers, Events, Methods> & ThisType<Methods & YoxInterface>\n  ) {\n    return options\n  }\n\n\n  /**\n   * 安装插件\n   *\n   * 插件必须暴露 install 方法\n   */\n  public static use(\n    plugin: {\n      install(Y: typeof Yox): void\n    }\n  ): void {\n    plugin.install(Yox)\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  public static nextTick(task: Function, context?: any): void {\n    NextTask.shared().append(task, context)\n  }\n\n  /**\n   * 编译模板，暴露出来是为了打包阶段的模板预编译\n   */\n  public static compile(template: string | Function, stringify?: boolean): string | Function {\n    if (process.env.NODE_ENV !== 'pure' && process.env.NODE_ENV !== 'runtime') {\n      // 需要编译的都是模板源文件，一旦经过预编译，就成了 render 函数\n      if (is.func(template)) {\n        return template as Function\n      }\n      if (!compileCache[template as string]) {\n        const nodes = templateCompiler.compile(template as string)\n        if (process.env.NODE_ENV === 'development') {\n          if (nodes.length !== 1) {\n            logger.fatal(`The \"template\" option should have just one root element.`)\n          }\n        }\n        compileCache[template as string] = templateGenerator.generate(nodes[0])\n      }\n      template = compileCache[template as string]\n      return stringify\n        ? template\n        : new Function(`return ${template}`)()\n    }\n    else {\n      return template\n    }\n  }\n\n  /**\n   * 注册全局指令\n   */\n  public static directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !directive) {\n        return getResource(globalDirectives, name as string)\n      }\n      setResource(globalDirectives, name, directive)\n    }\n  }\n\n  /**\n   * 注册全局过渡动画\n   */\n  public static transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !transition) {\n        return getResource(globalTransitions, name as string)\n      }\n      setResource(globalTransitions, name, transition)\n    }\n  }\n\n  /**\n   * 注册全局组件\n   */\n  public static component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !component) {\n        return getResource(globalComponents, name as string)\n      }\n      setResource(globalComponents, name, component)\n    }\n  }\n\n  /**\n   * 注册全局子模板\n   */\n  public static partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !partial) {\n        return getResource(globalPartials, name as string)\n      }\n      setResource(globalPartials, name, partial, Yox.compile)\n    }\n  }\n\n  /**\n   * 注册全局过滤器\n   */\n  public static filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (is.string(name) && !filter) {\n        return getResource(globalFilters, name as string)\n      }\n      setResource(globalFilters, name, filter)\n    }\n  }\n\n  constructor(options?: ComponentOptions) {\n\n    const instance = this, $options: ComponentOptions = options || constant.EMPTY_OBJECT\n\n    // 为了冒泡 HOOK_BEFORE_CREATE 事件，必须第一时间创建 emitter\n    // 监听各种事件\n    // 支持命名空间\n    instance.$emitter = new Emitter(constant.TRUE)\n\n    if ($options.events) {\n      instance.on($options.events)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      // 当前组件的直接父组件\n      if ($options.parent) {\n        instance.$parent = $options.parent\n      }\n\n      // 建立好父子连接后，立即触发钩子\n      execute($options[HOOK_BEFORE_CREATE], instance, $options)\n      // 冒泡 before create 事件\n      instance.fire(HOOK_BEFORE_CREATE + NAMESPACE_HOOK, $options)\n\n    }\n\n    let {\n      data,\n      props,\n      vnode,\n      propTypes,\n      computed,\n      methods,\n      watchers,\n      extensions,\n    } = $options\n\n    instance.$options = $options\n\n    if (extensions) {\n      object.extend(instance, extensions)\n    }\n\n    // 数据源，默认值仅在创建组件时启用\n    const source = props ? object.copy(props) : {}\n    if (process.env.NODE_ENV !== 'pure') {\n      if (propTypes) {\n        object.each(\n          propTypes,\n          function (rule: PropRule, key: string) {\n            let value = source[key]\n            if (process.env.NODE_ENV === 'development') {\n              checkProp(key, value, rule)\n            }\n            if (value === constant.UNDEFINED) {\n              value = rule.value\n              if (value !== constant.UNDEFINED) {\n                source[key] = rule.type === constant.RAW_FUNCTION\n                  ? value\n                  : is.func(value)\n                    ? (value as PropValueFunction)()\n                    : value\n              }\n            }\n          }\n        )\n      }\n    }\n\n    // 先放 props\n    // 当 data 是函数时，可以通过 this.get() 获取到外部数据\n    const observer = instance.$observer = new Observer(source, instance)\n\n    if (computed) {\n      object.each(\n        computed,\n        function (options, keypath) {\n          observer.addComputed(keypath, options)\n        }\n      )\n    }\n\n    // 后放 data\n    if (process.env.NODE_ENV === 'development') {\n      if (vnode && is.object(data)) {\n        logger.warn(`The \"data\" option of child component should be a function which return an object.`)\n      }\n    }\n\n    const extend = is.func(data) ? execute(data, instance, options) : data\n    if (is.object(extend)) {\n      object.each(\n        extend,\n        function (value, key) {\n          if (process.env.NODE_ENV === 'development') {\n            if (object.has(source, key)) {\n              logger.warn(`The data \"${key}\" is already used as a prop.`)\n            }\n          }\n          source[key] = value\n        }\n      )\n    }\n\n    if (methods) {\n      object.each(\n        methods,\n        function (method: Function, name: string) {\n          if (process.env.NODE_ENV === 'development') {\n            if (instance[name]) {\n              logger.fatal(`The method \"${name}\" is conflicted with built-in methods.`)\n            }\n          }\n          instance[name] = method\n        }\n      )\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      let placeholder: Node | void = constant.UNDEFINED,\n\n      {\n        el,\n        root,\n        model,\n        context,\n        replace,\n        template,\n        transitions,\n        components,\n        directives,\n        partials,\n        filters,\n        slots,\n      } = $options\n\n      if (model) {\n        instance.$model = model\n      }\n\n      // 把 slots 放进数据里，方便 get\n      if (slots) {\n        object.extend(source, slots)\n      }\n\n      // 检查 template\n      if (is.string(template)) {\n        // 传了选择器，则取对应元素的 html\n        if (selectorPattern.test(template as string)) {\n          placeholder = domApi.find(template as string)\n          if (placeholder) {\n            template = domApi.html(placeholder as Element) as string\n            placeholder = constant.UNDEFINED\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The selector \"${template}\" can't match an element.`)\n          }\n        }\n      }\n\n      // 检查 el\n      if (el) {\n\n        if (is.string(el)) {\n          const selector = el as string\n          if (selectorPattern.test(selector)) {\n            placeholder = domApi.find(selector)\n            if (process.env.NODE_ENV === 'development') {\n              if (!placeholder) {\n                logger.fatal(`The selector \"${selector}\" can't match an element.`)\n              }\n            }\n          }\n          else if (process.env.NODE_ENV === 'development') {\n            logger.fatal(`The \"el\" option should be a selector.`)\n          }\n        }\n        else {\n          placeholder = el as Node\n        }\n\n        if (!replace) {\n          domApi.append(\n            placeholder as Node,\n            placeholder = domApi.createComment(constant.EMPTY_STRING)\n          )\n        }\n\n      }\n\n      // 根组件\n      if (root) {\n        instance.$root = root\n      }\n      // 当前组件是被哪个组件渲染出来的\n      // 因为有 slot 机制，$context 不一定等于 $parent\n      if (context) {\n        instance.$context = context\n      }\n\n      setFlexibleOptions(instance, constant.RAW_TRANSITION, transitions)\n      setFlexibleOptions(instance, constant.RAW_COMPONENT, components)\n      setFlexibleOptions(instance, constant.RAW_DIRECTIVE, directives)\n      setFlexibleOptions(instance, constant.RAW_PARTIAL, partials)\n      setFlexibleOptions(instance, constant.RAW_FILTER, filters)\n\n      // 当存在模板和计算属性时\n      // 因为这里把模板当做一种特殊的计算属性\n      // 因此模板这个计算属性的优先级应该最高\n      if (template) {\n\n        // 拷贝一份，避免影响外部定义的 watchers\n        const newWatchers = watchers\n          ? object.copy(watchers)\n          : {}\n\n        newWatchers[TEMPLATE_COMPUTED] = {\n          // 模板一旦变化，立即刷新\n          sync: constant.TRUE,\n          watcher: function (vnode: VNode) {\n            instance.update(vnode, instance.$vnode as VNode)\n          }\n        }\n\n        // 当模板的依赖变了，则重新创建 virtual dom\n        observer.addComputed(\n          TEMPLATE_COMPUTED,\n          {\n            // 当模板依赖变化时，异步通知模板更新\n            sync: constant.FALSE,\n            get: function () {\n              return instance.render()\n            }\n          }\n        )\n\n        instance.watch(newWatchers)\n\n        if (process.env.NODE_ENV !== 'pure') {\n          execute(instance.$options[HOOK_AFTER_CREATE], instance)\n          instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n        }\n\n        // 编译模板\n        // 在开发阶段，template 是原始的 html 模板\n        // 在产品阶段，template 是编译后的渲染函数\n        // 当然，具体是什么需要外部自己控制\n        instance.$template = is.string(template)\n          ? Yox.compile(template as string) as Function\n          : template as Function\n\n        if (!vnode) {\n\n          if (process.env.NODE_ENV === 'development') {\n            if (!placeholder) {\n              logger.fatal('The \"el\" option is required for root component.')\n            }\n          }\n\n          vnode = snabbdom.create(\n            domApi,\n            placeholder as Node,\n            instance,\n            constant.EMPTY_STRING\n          )\n\n        }\n\n        instance.update(\n          instance.get(TEMPLATE_COMPUTED),\n          vnode\n        )\n\n        return\n\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        if (placeholder || vnode) {\n          logger.fatal('The \"template\" option is required.')\n        }\n      }\n\n    }\n\n    if (watchers) {\n      instance.watch(watchers)\n    }\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute(instance.$options[HOOK_AFTER_CREATE], instance)\n      instance.fire(HOOK_AFTER_CREATE + NAMESPACE_HOOK)\n    }\n\n  }\n\n  /**\n   * 取值\n   */\n  get(\n    keypath: string,\n    defaultValue?: any\n  ): any {\n    return this.$observer.get(keypath, defaultValue)\n  }\n\n  /**\n   * 设值\n   */\n  set(\n    keypath: string | Data,\n    value?: any\n  ): void {\n    // 组件经常有各种异步改值，为了避免组件销毁后依然调用 set\n    // 这里判断一下，至于其他方法的异步调用就算了，业务自己控制吧\n    const { $observer } = this\n    if ($observer) {\n      $observer.set(keypath, value)\n    }\n  }\n\n  /**\n   * 监听事件，支持链式调用\n   */\n  on(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener)\n    return this\n  }\n\n  /**\n   * 监听一次事件，支持链式调用\n   */\n  once(\n    type: string | Record<string, ThisListener<this>>,\n    listener?: ThisListener<this>\n  ): this {\n    addEvents(this, type, listener, constant.TRUE)\n    return this\n  }\n\n  /**\n   * 取消监听事件，支持链式调用\n   */\n  off(\n    type?: string,\n    listener?: Function\n  ): this {\n    this.$emitter.off(type, listener)\n    return this\n  }\n\n  /**\n   * 发射事件\n   */\n  fire(\n    type: string | CustomEvent,\n    data?: Data | boolean,\n    downward?: boolean\n  ): boolean {\n\n    // 外部为了使用方便，fire(type) 或 fire(type, data) 就行了\n    // 内部为了保持格式统一\n    // 需要转成 Event，这样还能知道 target 是哪个组件\n\n    let instance = this,\n\n    { $emitter, $parent, $children } = instance,\n\n    event = type instanceof CustomEvent ? type : new CustomEvent(type),\n\n    args: any[] = [event],\n\n    isComplete: boolean\n\n    // 创建完 CustomEvent，如果没有人为操作\n    // 它的 ns 为 undefined\n    // 这里先解析出命名空间，避免每次 fire 都要解析\n    if (event.ns === constant.UNDEFINED) {\n      const namespace = $emitter.parse(event.type)\n      event.type = namespace.type\n      event.ns = namespace.ns\n    }\n\n    // 告诉外部是谁发出的事件\n    if (!event.target) {\n      event.target = instance\n    }\n\n    // 比如 fire('name', true) 直接向下发事件\n    if (is.object(data)) {\n      array.push(args, data as Data)\n    }\n    else if (data === constant.TRUE) {\n      downward = constant.TRUE\n    }\n\n    // 如果手动 fire 带上了事件命名空间\n    // 则命名空间不能是 native，因为 native 有特殊用处\n    if (process.env.NODE_ENV === 'development') {\n      if (event.ns === MODIFER_NATIVE) {\n        logger.error(`The namespace \"${MODIFER_NATIVE}\" is not permitted.`)\n      }\n    }\n\n    isComplete = $emitter.fire(event, args)\n    if (isComplete) {\n      if (downward) {\n        if ($children) {\n          event.phase = CustomEvent.PHASE_DOWNWARD\n          array.each(\n            $children,\n            function (child) {\n              return isComplete = child.fire(event, data, constant.TRUE)\n            }\n          )\n        }\n      }\n      else if ($parent) {\n        event.phase = CustomEvent.PHASE_UPWARD\n        isComplete = $parent.fire(event, data)\n      }\n    }\n\n    return isComplete\n\n  }\n\n  /**\n   * 监听数据变化，支持链式调用\n   */\n  watch(\n    keypath: string | Record<string, ThisWatcher<this> | ThisWatcherOptions<this>>,\n    watcher?: ThisWatcher<this> | ThisWatcherOptions<this>,\n    immediate?: boolean\n  ): this {\n    this.$observer.watch(keypath, watcher, immediate)\n    return this\n  }\n\n  /**\n   * 取消监听数据变化，支持链式调用\n   */\n  unwatch(\n    keypath?: string,\n    watcher?: ThisWatcher<this>\n  ): this {\n    this.$observer.unwatch(keypath, watcher)\n    return this\n  }\n\n  /**\n   * 加载组件，组件可以是同步或异步，最后会调用 callback\n   *\n   * @param name 组件名称\n   * @param callback 组件加载成功后的回调\n   */\n  loadComponent(name: string, callback: ComponentCallback): void {\n    if (process.env.NODE_ENV !== 'pure') {\n      if (!loadComponent(this.$components, name, callback)) {\n        if (process.env.NODE_ENV === 'development') {\n          if (!loadComponent(globalComponents, name, callback)) {\n            logger.error(`The component \"${name}\" is not found.`)\n          }\n        }\n        else {\n          loadComponent(globalComponents, name, callback)\n        }\n      }\n    }\n  }\n\n  /**\n   * 创建子组件\n   *\n   * @param options 组件配置\n   * @param vnode 虚拟节点\n   */\n  createComponent(options: ComponentOptions, vnode: VNode): YoxInterface {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this\n\n      options = object.copy(options)\n      options.root = instance.$root || instance\n      options.parent = instance\n      options.context = vnode.context\n      options.vnode = vnode\n      options.replace = constant.TRUE\n\n      let { props, slots, directives } = vnode,\n\n      model = directives && directives[DIRECTIVE_MODEL]\n\n      if (model) {\n        if (!props) {\n          props = {}\n        }\n        const key = options.model || MODEL_PROP_DEFAULT\n        props[key] = model.value\n        options.model = key\n      }\n\n      if (props) {\n        options.props = props\n      }\n\n      if (slots) {\n        options.slots = slots\n      }\n\n      const child = new Yox(options)\n\n      array.push(\n        instance.$children || (instance.$children = []),\n        child\n      )\n\n      const node = child.$el\n      if (node) {\n        vnode.node = node\n      }\n      else if (process.env.NODE_ENV === 'development') {\n        logger.fatal(`The root element of component \"${vnode.tag}\" is not found.`)\n      }\n\n      return child\n    }\n    else {\n      return this\n    }\n  }\n\n  /**\n   * 注册当前组件级别的指令\n   */\n  directive(\n    name: string | Record<string, DirectiveHooks>,\n    directive?: DirectiveHooks\n  ): DirectiveHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $directives } = instance\n      if (is.string(name) && !directive) {\n        return getResource($directives, name as string, Yox.directive)\n      }\n      setResource(\n        $directives || (instance.$directives = {}),\n        name,\n        directive\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过渡动画\n   */\n  transition(\n    name: string | Record<string, TransitionHooks>,\n    transition?: TransitionHooks\n  ): TransitionHooks | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $transitions } = instance\n      if (is.string(name) && !transition) {\n        return getResource($transitions, name as string, Yox.transition)\n      }\n      setResource(\n        $transitions || (instance.$transitions = {}),\n        name,\n        transition\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的组件\n   */\n  component(\n    name: string | Record<string, Component>,\n    component?: Component\n  ): Component | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $components } = instance\n      if (is.string(name) && !component) {\n        return getResource($components, name as string, Yox.component)\n      }\n      setResource(\n        $components || (instance.$components = {}),\n        name,\n        component\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的子模板\n   */\n  partial(\n    name: string | Record<string, Partial>,\n    partial?: Partial\n  ): Function | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $partials } = instance\n      if (is.string(name) && !partial) {\n        return getResource($partials, name as string, Yox.partial)\n      }\n      setResource(\n        $partials || (instance.$partials = {}),\n        name,\n        partial,\n        Yox.compile\n      )\n    }\n  }\n\n  /**\n   * 注册当前组件级别的过滤器\n   */\n  filter(\n    name: string | Record<string, Filter>,\n    filter?: Filter\n  ): Filter | void {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this, { $filters } = instance\n      if (is.string(name) && !filter) {\n        return getResource($filters, name as string, Yox.filter)\n      }\n      setResource(\n        $filters || (instance.$filters = {}),\n        name,\n        filter\n      )\n    }\n  }\n\n  /**\n   * 对于某些特殊场景，修改了数据，但是模板的依赖中并没有这一项\n   * 而你非常确定需要更新模板，强制刷新正是你需要的\n   */\n  forceUpdate(props?: Data): void {\n    if (process.env.NODE_ENV !== 'pure') {\n\n      const instance = this,\n\n      { $options, $vnode, $observer } = instance,\n\n      { computed } = $observer\n\n      if ($vnode && computed) {\n\n        const template = computed[TEMPLATE_COMPUTED],\n\n        oldValue = template.get()\n\n        if (props) {\n          execute($options[HOOK_BEFORE_PROPS_UPDATE], instance, props)\n          instance.set(props)\n        }\n\n        // 当前可能正在进行下一轮更新\n        $observer.nextTask.run()\n\n        // 没有更新模板，强制刷新\n        if (!props && oldValue === template.get()) {\n          instance.update(\n            template.get(constant.TRUE),\n            $vnode\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 把模板抽象语法树渲染成 virtual dom\n   */\n  render() {\n    if (process.env.NODE_ENV !== 'pure') {\n      const instance = this\n      return templateRender.render(\n        instance,\n        instance.$observer,\n        instance.$template as Function,\n        object.merge(instance.$filters, globalFilters) as Record<string, Function>,\n        object.merge(instance.$partials, globalPartials) as Record<string, Function>,\n        object.merge(instance.$directives, globalDirectives) as Record<string, DirectiveHooks>,\n        object.merge(instance.$transitions, globalTransitions) as Record<string, TransitionHooks>\n      )\n    }\n  }\n\n  /**\n   * 更新 virtual dom\n   *\n   * @param vnode\n   * @param oldVnode\n   */\n  update(vnode: VNode, oldVnode: VNode) {\n    if (process.env.NODE_ENV !== 'pure') {\n      let instance = this,\n\n      { $vnode, $options } = instance,\n\n      afterHook: string\n\n      // 每次渲染重置 refs\n      // 在渲染过程中收集最新的 ref\n      // 这样可避免更新时，新的 ref，在前面创建，老的 ref 却在后面删除的情况\n      instance.$refs = {}\n\n      if ($vnode) {\n        execute($options[HOOK_BEFORE_UPDATE], instance)\n        instance.fire(HOOK_BEFORE_UPDATE + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        afterHook = HOOK_AFTER_UPDATE\n      }\n      else {\n        execute($options[HOOK_BEFORE_MOUNT], instance)\n        instance.fire(HOOK_BEFORE_MOUNT + NAMESPACE_HOOK)\n        snabbdom.patch(domApi, vnode, oldVnode)\n        instance.$el = vnode.node as HTMLElement\n        afterHook = HOOK_AFTER_MOUNT\n      }\n\n      instance.$vnode = vnode\n\n      // 跟 nextTask 保持一个节奏\n      // 这样可以预留一些优化的余地\n      Yox.nextTick(\n        function () {\n          if (instance.$vnode) {\n            execute($options[afterHook], instance)\n            instance.fire(afterHook + NAMESPACE_HOOK)\n          }\n        }\n      )\n    }\n  }\n\n  /**\n   * 校验组件参数\n   *\n   * @param props\n   */\n  checkProp(key: string, value: any): void {\n    if (process.env.NODE_ENV === 'development') {\n      const { propTypes } = this.$options\n      if (propTypes) {\n        const rule = propTypes[key]\n        if (rule) {\n          checkProp(key, value, rule)\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n\n    const instance = this,\n\n    { $parent, $options, $emitter, $observer } = instance\n\n    if (process.env.NODE_ENV !== 'pure') {\n\n      execute($options[HOOK_BEFORE_DESTROY], instance)\n      instance.fire(HOOK_BEFORE_DESTROY + NAMESPACE_HOOK)\n\n      const { $vnode } = instance\n\n      if ($parent && $parent.$children) {\n        array.remove($parent.$children, instance)\n      }\n\n      if ($vnode) {\n        // virtual dom 通过判断 parent.$vnode 知道宿主组件是否正在销毁\n        instance.$vnode = constant.UNDEFINED\n        snabbdom.destroy(domApi, $vnode, !$parent)\n      }\n\n    }\n\n    $observer.destroy()\n\n    if (process.env.NODE_ENV !== 'pure') {\n      execute($options[HOOK_AFTER_DESTROY], instance)\n      instance.fire(HOOK_AFTER_DESTROY + NAMESPACE_HOOK)\n    }\n\n    // 发完 after destroy 事件再解绑所有事件\n    $emitter.off()\n\n    object.clear(instance)\n\n  }\n\n  /**\n   * 因为组件采用的是异步更新机制，为了在更新之后进行一些操作，可使用 nextTick\n   */\n  nextTick(task: ThisTask<this>): void {\n    this.$observer.nextTask.append(task, this)\n  }\n\n  /**\n   * 取反 keypath 对应的数据\n   *\n   * 不管 keypath 对应的数据是什么类型，操作后都是布尔型\n   */\n  toggle(keypath: string): boolean {\n    return this.$observer.toggle(keypath)\n  }\n\n  /**\n   * 递增 keypath 对应的数据\n   *\n   * 注意，最好是整型的加法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递增\n   * @param step 步进值，默认是 1\n   * @param max 可以递增到的最大值，默认不限制\n   */\n  increase(keypath: string, step?: number, max?: number): number | void {\n    return this.$observer.increase(keypath, step, max)\n  }\n\n  /**\n   * 递减 keypath 对应的数据\n   *\n   * 注意，最好是整型的减法，如果涉及浮点型，不保证计算正确\n   *\n   * @param keypath 值必须能转型成数字，如果不能，则默认从 0 开始递减\n   * @param step 步进值，默认是 1\n   * @param min 可以递减到的最小值，默认不限制\n   */\n  decrease(keypath: string, step?: number, min?: number): number | void {\n    return this.$observer.decrease(keypath, step, min)\n  }\n\n  /**\n   * 在数组指定位置插入元素\n   *\n   * @param keypath\n   * @param item\n   * @param index\n   */\n  insert(keypath: string, item: any, index: number | boolean): true | void {\n    return this.$observer.insert(keypath, item, index)\n  }\n\n  /**\n   * 在数组尾部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  append(keypath: string, item: any): true | void {\n    return this.$observer.append(keypath, item)\n  }\n\n  /**\n   * 在数组首部添加元素\n   *\n   * @param keypath\n   * @param item\n   */\n  prepend(keypath: string, item: any): true | void {\n    return this.$observer.prepend(keypath, item)\n  }\n\n  /**\n   * 通过索引移除数组中的元素\n   *\n   * @param keypath\n   * @param index\n   */\n  removeAt(keypath: string, index: number): true | void {\n    return this.$observer.removeAt(keypath, index)\n  }\n\n  /**\n   * 直接移除数组中的元素\n   *\n   * @param keypath\n   * @param item\n   */\n  remove(keypath: string, item: any): true | void {\n    return this.$observer.remove(keypath, item)\n  }\n\n  /**\n   * 拷贝任意数据，支持深拷贝\n   *\n   * @param data\n   * @param deep\n   */\n  copy<T>(data: T, deep?: boolean): T {\n    return this.$observer.copy(data, deep)\n  }\n\n}\n\nconst toString = Object.prototype.toString\n\nfunction matchType(value: any, type: string) {\n  return type === 'numeric'\n    ? is.numeric(value)\n    : string.lower(toString.call(value)) === `[object ${type}]`\n}\n\nfunction checkProp(key: string, value: any, rule: PropRule) {\n\n  // 传了数据\n  if (value !== constant.UNDEFINED) {\n\n    const type = rule.type\n\n    // 如果不写 type 或 type 不是 字符串 或 数组\n    // 就当做此规则无效，和没写一样\n    if (type) {\n\n      // 自定义函数判断是否匹配类型\n      // 自己打印警告信息吧\n      if (is.func(type)) {\n        (type as PropTypeFunction)(key, value)\n      }\n      else {\n\n        let matched = constant.FALSE\n\n        // type: 'string'\n        if (!string.falsy(type)) {\n          matched = matchType(value, type as string)\n        }\n        // type: ['string', 'number']\n        else if (!array.falsy(type)) {\n          array.each(\n            type as string[],\n            function (item) {\n              if (matchType(value, item)) {\n                matched = constant.TRUE\n                return constant.FALSE\n              }\n            }\n          )\n        }\n\n        if (!matched) {\n          logger.warn(`The type of prop \"${key}\" expected to be \"${type}\", but is \"${value}\".`)\n        }\n\n      }\n\n    }\n    else {\n      logger.warn(`The prop \"${key}\" in propTypes has no type.`)\n    }\n\n  }\n  // 没传值但此项是必传项\n  else if (rule.required) {\n    logger.warn(`The prop \"${key}\" is marked as required, but its value is not found.`)\n  }\n\n}\n\nfunction setFlexibleOptions(instance: YoxInterface, key: string, value: Function | Data | void) {\n  if (is.func(value)) {\n    instance[key](execute(value, instance))\n  }\n  else if (is.object(value)) {\n    instance[key](value)\n  }\n}\n\nfunction addEvent(instance: YoxInterface, type: string, listener: Function, once?: true) {\n  const options: EmitterOptions = {\n    fn: listener,\n    ctx: instance\n  }\n  if (once) {\n    options.max = 1\n  }\n  // YoxInterface 没有声明 $emitter，因为不想让外部访问，\n  // 但是这里要用一次，所以加了 as any\n  (instance as any).$emitter.on(type, options)\n}\n\nfunction addEvents(\n  instance: YoxInterface,\n  type: string | Record<string, Function>,\n  listener?: Function,\n  once?: true\n) {\n  if (is.string(type)) {\n    addEvent(instance, type as string, listener as Function, once)\n  }\n  else {\n    object.each(\n      type as Data,\n      function (value: Function, key: string) {\n        addEvent(instance, key, value, once)\n      }\n    )\n  }\n}\n\nfunction loadComponent(\n  registry: Record<string, Component | ComponentCallback[]> | void,\n  name: string,\n  callback: ComponentCallback\n): true | void {\n\n  if (registry && registry[name]) {\n\n    const component = registry[name]\n\n    // 注册的是异步加载函数\n    if (is.func(component)) {\n\n      registry[name] = [callback]\n\n      const componentCallback = function (result: ComponentOptions) {\n\n        const queue = registry[name], options = result['default'] || result\n\n        registry[name] = options\n\n        array.each(\n          queue as ComponentCallback[],\n          function (callback) {\n            callback(options)\n          }\n        )\n\n      },\n\n      promise = (component as ComponentLoader)(componentCallback)\n      if (promise) {\n        promise.then(componentCallback)\n      }\n\n    }\n    // 正在加载中\n    else if (is.array(component)) {\n      array.push(\n        component as ComponentCallback[],\n        callback\n      )\n    }\n    // 不是异步加载函数，直接同步返回\n    else {\n      callback(component as ComponentOptions)\n    }\n    return constant.TRUE\n  }\n\n}\n\nfunction getResource(registry: Data | void, name: string, lookup?: Function) {\n  if (registry && registry[name]) {\n    return registry[name]\n  }\n  else if (lookup) {\n    return lookup(name)\n  }\n}\n\nfunction setResource(registry: Data, name: string | Data, value?: any, formatValue?: (value: any) => any) {\n  if (is.string(name)) {\n    registry[name as string] = formatValue ? formatValue(value) : value\n  }\n  else {\n    object.each(\n      name as Data,\n      function (value, key) {\n        registry[key] = formatValue ? formatValue(value) : value\n      }\n    )\n  }\n}\n\nif (process.env.NODE_ENV !== 'pure') {\n  // 全局注册内置指令\n  Yox.directive({ event, model, binding })\n  // 全局注册内置过滤器\n  Yox.filter({\n    hasSlot(name: string): boolean {\n      // 不鼓励在过滤器使用 this\n      // 因此过滤器没有 this 的类型声明\n      // 这个内置过滤器是不得不用 this\n      return (this as YoxInterface).get(SLOT_DATA_PREFIX + name) !== constant.UNDEFINED\n    }\n  })\n}\n"],"names":["constant.RAW_FUNCTION","constant.NULL","is.func","is.array","constant.UNDEFINED","constant.TRUE","constant.MINUS_ONE","constant.FALSE","array","constant.EMPTY_ARRAY","falsy","constant.EMPTY_STRING","is.number","indexOf","has","is.string","constant.RAW_DOT","string.startsWith","each","join","string.has","constant.RAW_WILDCARD","object","array.each","is.object","keypathUtil.each","constant.RAW_UNDEFINED","constant.EMPTY_FUNCTION","constant.WINDOW","constant.GLOBAL","object.copy","array.has","array.push","object.each","string.indexOf","string.slice","nextTick","array.unshift","is.numeric","array.falsy","object.has","constant.RAW_VALUE","keypathUtil.match","object.get","constant.RAW_LENGTH","constant.EMPTY_OBJECT","keypathUtil.join","keypathUtil.matchFuzzy","keypathUtil.isFuzzy","object.set","string.codeAt","is.boolean","object.sort","array.remove","object.clear","object.extend","extend","string"],"mappings":"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"}